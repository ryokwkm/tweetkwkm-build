{"version":3,"sources":["components/ListIndex.js","constants/common.js","components/Top.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["ListIndex","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","offset","currentPosition","react_default","a","createElement","lib_default","Google","client","className","format","style","display","React","Component","HOSTNAME","PRD","DEV","getUrl","path","hostName","window","location","port","Top","isLoaded","error","items","_this2","fetch","PATH","then","res","json","result","setState","components_ListIndex","monsters","App","pathname","ReactGA","set","page","pageview","components_Top","theme","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","Boolean","hostname","match","initialize","history","createBrowserHistory","listen","_ref","ReactDOM","render","ThemeProvider","CssBaseline","react_router","exact","component","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.513b81a4.chunk.js","sourcesContent":["import React from \"react\"\n// import MainSportsList from \"./lists/MainSportsList\"\nimport PropTypes from \"prop-types\"\nimport AdSense from \"react-adsense\"\n\nclass ListIndex extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { offset: 0, currentPosition: 0 }\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <MainSportsList monsters={this.props.monsters} /> */}\n        <AdSense.Google\n          client=\"ca-pub-7387197978271555\"\n          className=\"adsbygoogle\"\n          format=\"auto\"\n          style={{ display: \"block\" }}\n        />\n      </div>\n    )\n  }\n}\n\nListIndex.propTypes = {\n  monsters: PropTypes.array.isRequired,\n}\n\nexport default ListIndex\n","export const HOSTNAME = {\n  PRD: \"https://ts.2chx.net/Api/get\",\n  DEV: \"https://ts.2chx.net/Api/get\", // \"http://asuseka.net:8888/Api/get\",\n}\n\n/**\n * removeSlashEndOfPath\n * パスの末尾のスラッシュを削除\n */\nexport function removeSlashEndOfPath(path) {\n  if (path.match(/\\/$/)) {\n    return path.slice(0, -1)\n  }\n  return path\n}\n\n/**\n * getUrl\n * APIのURLを取得\n */\nexport function getUrl(path) {\n  const hostName = HOSTNAME[getEnv()]\n  if (!path) {\n    return hostName\n  } else {\n    return hostName + \"/\" + path\n  }\n}\n\n/**\n * getEnv\n * 現在の環境を取得\n */\nexport function getEnv() {\n  if (window.location.port === \"3001\") {\n    return \"DEV\"\n  } else {\n    return \"PRD\"\n  }\n}\n\nexport function formatDate(date, format) {\n  format = format.replace(/yyyy/g, date.getFullYear())\n  format = format.replace(/MM/g, (\"0\" + (date.getMonth() + 1)).slice(-2))\n  format = format.replace(/dd/g, (\"0\" + date.getDate()).slice(-2))\n  format = format.replace(/HH/g, (\"0\" + date.getHours()).slice(-2))\n  format = format.replace(/mm/g, (\"0\" + date.getMinutes()).slice(-2))\n  format = format.replace(/ss/g, (\"0\" + date.getSeconds()).slice(-2))\n  format = format.replace(/SSS/g, (\"00\" + date.getMilliseconds()).slice(-3))\n  return format\n}\n","import React from \"react\"\nimport ListIndex from \"./ListIndex\"\nimport * as PATH from \"../constants/common\"\nclass Top extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      error: null,\n      items: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch(PATH.getUrl(\"?country=13\"))\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            items: result,\n          })\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error: error,\n          })\n        }\n      )\n  }\n\n  render() {\n    return <ListIndex monsters={this.state.items} />\n  }\n}\n\nexport default Top\n","import React from \"react\"\nimport Top from \"./components/Top\"\nimport ReactGA from \"react-ga\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n\n  componentDidMount() {\n    const { pathname } = this.props.location\n    ReactGA.set({ page: pathname })\n    ReactGA.pageview(pathname)\n  }\n\n  render() {\n    return <Top />\n  }\n}\n\nexport default App\n","import { red } from \"@material-ui/core/colors\"\nimport { createMuiTheme } from \"@material-ui/core/styles\"\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n})\n\nexport default theme\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { ThemeProvider } from \"@material-ui/styles\"\nimport App from \"./App\"\nimport theme from \"./theme\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Router, Route } from \"react-router-dom\"\nimport ReactGA from \"react-ga\"\nimport { createBrowserHistory } from \"history\"\n// import Top from \"./components/Top\"\n\n/**\n * gaの設定\n * routerの設定\n * @ryokwkm\n */\nconst Home = () => (\n  <div>\n    <h2>Home</h2>\n    <p>Welcome to ようこそ</p>\n  </div>\n)\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n    <p>フレンズに投票するページです</p>\n  </div>\n)\n\nReactGA.initialize(\"UA-15142129-4\")\nconst history = createBrowserHistory()\nhistory.listen(({ pathname }) => {\n  ReactGA.set({ page: pathname })\n  ReactGA.pageview(pathname)\n})\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"))\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    {/* <App /> */}\n    <Router history={history}>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/home\" component={Home} />\n      </div>\n    </Router>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}